{
  "version": 3,
  "sources": ["../src/constants.ts", "../src/index.ts"],
  "sourcesContent": ["// base32 alternative that avoids the letters I,L,O,U\nexport type CROCKFORD = \"0123456789ABCDEFGHJKMNPQRSTVWXYZ\";\n\n// Ulid spec requires 80 bits of randomness\nexport const RANDOMNESS_BITS = 80;\nexport const TIME_BITS = 48;\nexport const UINT8ARRAY_SIZE = RANDOMNESS_BITS / 8;\nexport const BINARY_RADIX = 2;\nexport const BITS_PER_CROCKFORD_CHAR = 5;\n\nexport const CROCKFORD_MAP = Object.freeze({\n  \"00000\": \"0\",\n  \"00001\": \"1\",\n  \"00010\": \"2\",\n  \"00011\": \"3\",\n  \"00100\": \"4\",\n  \"00101\": \"5\",\n  \"00110\": \"6\",\n  \"00111\": \"7\",\n  \"01000\": \"8\",\n  \"01001\": \"9\",\n  \"01010\": \"A\",\n  \"01011\": \"B\",\n  \"01100\": \"C\",\n  \"01101\": \"D\",\n  \"01110\": \"E\",\n  \"01111\": \"F\",\n  \"10000\": \"G\",\n  \"10001\": \"H\",\n  \"10010\": \"J\",\n  \"10011\": \"K\",\n  \"10100\": \"M\",\n  \"10101\": \"N\",\n  \"10110\": \"P\",\n  \"10111\": \"Q\",\n  \"11000\": \"R\",\n  \"11001\": \"S\",\n  \"11010\": \"T\",\n  \"11011\": \"V\",\n  \"11100\": \"W\",\n  \"11101\": \"X\",\n  \"11110\": \"Y\",\n  \"11111\": \"Z\",\n});\nexport type CrockfordMapKey = keyof typeof CROCKFORD_MAP;\n", "import {\n  BINARY_RADIX,\n  BITS_PER_CROCKFORD_CHAR,\n  type CrockfordMapKey,\n  CROCKFORD_MAP,\n  TIME_BITS,\n  UINT8ARRAY_SIZE,\n} from \"./constants\";\n\nexport function getRandomnessBits(prng: (arr: ArrayBufferView) => any) {\n  const bits = new Uint8Array(UINT8ARRAY_SIZE);\n  prng(bits);\n\n  const numAsBinaryString = bits.reduce((arr, cur) => {\n    const binary = cur.toString(BINARY_RADIX);\n    const padded = \"00000000\".slice(binary.length) + binary;\n\n    return arr + padded;\n  }, \"\");\n\n  let numAsCrockfordString = \"\";\n  for (let i = 0; i < numAsBinaryString.length; i += BITS_PER_CROCKFORD_CHAR) {\n    const key = numAsBinaryString.slice(\n      i,\n      i + BITS_PER_CROCKFORD_CHAR\n    ) as CrockfordMapKey;\n    numAsCrockfordString += CROCKFORD_MAP[key];\n  }\n\n  return numAsCrockfordString;\n}\n\nexport function getTimeBits(time: number = Date.now()) {\n  //make sure time is an integer when passed in\n  time = Math.floor(time);\n\n  const timeInBinary = time.toString(BINARY_RADIX);\n  const padded =\n    Array(TIME_BITS - timeInBinary.length)\n      .fill(\"0\")\n      .join(\"\") + timeInBinary;\n\n  const firstletter = (\"00\" + padded.slice(0, 3)) as CrockfordMapKey;\n  let numAsCrockfordString = \"\" + CROCKFORD_MAP[firstletter];\n\n  for (let i = 3; i < padded.length; i += BITS_PER_CROCKFORD_CHAR) {\n    const key = padded.slice(i, i + BITS_PER_CROCKFORD_CHAR) as CrockfordMapKey;\n    numAsCrockfordString += CROCKFORD_MAP[key];\n  }\n\n  return numAsCrockfordString;\n}\n"],
  "mappings": "AAUO,IAAMA,EAAgB,OAAO,OAAO,CACzC,QAAS,IACT,QAAS,IACT,QAAS,IACT,QAAS,IACT,QAAS,IACT,QAAS,IACT,QAAS,IACT,QAAS,IACT,QAAS,IACT,QAAS,IACT,QAAS,IACT,QAAS,IACT,QAAS,IACT,QAAS,IACT,QAAS,IACT,QAAS,IACT,IAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,KAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAAS,GACX,CAAC,EClCM,SAASC,EAAkBC,EAAqC,CACrE,IAAMC,EAAO,IAAI,WAAW,EAAe,EAC3CD,EAAKC,CAAI,EAET,IAAMC,EAAoBD,EAAK,OAAO,CAACE,EAAKC,IAAQ,CAClD,IAAMC,EAASD,EAAI,SAAS,CAAY,EAClCE,EAAS,WAAW,MAAMD,EAAO,MAAM,EAAIA,EAEjD,OAAOF,EAAMG,CACf,EAAG,EAAE,EAEDC,EAAuB,GAC3B,QAASC,EAAI,EAAGA,EAAIN,EAAkB,OAAQM,GAAK,EAAyB,CAC1E,IAAMC,EAAMP,EAAkB,MAC5BM,EACAA,EAAI,CACN,EACAD,GAAwBG,EAAcD,EACxC,CAEA,OAAOF,CACT,CAEO,SAASI,EAAYC,EAAe,KAAK,IAAI,EAAG,CAErDA,EAAO,KAAK,MAAMA,CAAI,EAEtB,IAAMC,EAAeD,EAAK,SAAS,CAAY,EACzCN,EACJ,MAAM,GAAYO,EAAa,MAAM,EAClC,KAAK,GAAG,EACR,KAAK,EAAE,EAAIA,EAEVC,EAAe,KAAOR,EAAO,MAAM,EAAG,CAAC,EACzCC,EAAuB,GAAKG,EAAcI,GAE9C,QAASN,EAAI,EAAGA,EAAIF,EAAO,OAAQE,GAAK,EAAyB,CAC/D,IAAMC,EAAMH,EAAO,MAAME,EAAGA,EAAI,CAAuB,EACvDD,GAAwBG,EAAcD,EACxC,CAEA,OAAOF,CACT",
  "names": ["CROCKFORD_MAP", "getRandomnessBits", "prng", "bits", "numAsBinaryString", "arr", "cur", "binary", "padded", "numAsCrockfordString", "i", "key", "CROCKFORD_MAP", "getTimeBits", "time", "timeInBinary", "firstletter"]
}
